// Based on https://raw.githubusercontent.com/uBlock-user/uBO-Scriptlets/master/scriptlets.txt
// https://raw.githubusercontent.com/NanoAdblocker/NanoCore2/master/src/snippets.js
// https://raw.githubusercontent.com/uBlock-user/uBO-Scriptlets/master/scriptlets.txt
// And https://github.com/bogachenko/presstheattack/blob/personal/scriptlets.txt

// These are things I've found that I believe to be useful
// Mainly for my personal use but feel free to use it

// Grant fake notification permission
/// gfa.js application/javascript
(() => {
    Notification = function () { };
    Notification.permission = 'default';
    Notification.requestPermission = function (callback) {
        Notification.permission = 'grante';
        if (callback) {
            setTimeout(callback, 0, 'granted');
        }
        return Promise.resolve('granted');
    };
})();

// meta-tag-remover
// example.com##+js(remove-meta, /refresh|referrer/)
/// remove-meta.js application/javascript
(() => { 
          'use strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          const metanode = () => {
                                          try {
                                          	const metas = document.querySelectorAll('meta');
                                          	for (const meta of metas) {
                                              		if (meta.outerHTML.match(needle)) {
                                                                	meta.textContent = '';
									meta.remove();
                                              		}			
                                          	}
                                   	  } catch { }
          };
          const observer = new MutationObserver(metanode);
	  observer.observe(document.documentElement, { childList: true, subtree: true });
	  if (document.readyState === 'complete') { observer.disconnect(); return; } 
})();
